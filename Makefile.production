# FastML Production Deployment Makefile WIP
# For deploying to proper Kubernetes clusters (EKS, GKE, AKS, etc.)

# =============================================================================
# Configuration Variables
# =============================================================================

# Environment Configuration
ENVIRONMENT ?= dev
PROJECT_NAME ?= fastml-serve
NAMESPACE ?= $(PROJECT_NAME)-$(ENVIRONMENT)

# Container Registry Configuration
REGISTRY ?= docker.io/yourusername
IMAGE_TAG ?= $(shell git rev-parse --short HEAD)
VERSION ?= v1.0.0

# Image Names
API_IMAGE = $(REGISTRY)/$(PROJECT_NAME):$(IMAGE_TAG)
FRONTEND_IMAGE = $(REGISTRY)/$(PROJECT_NAME)-frontend:$(IMAGE_TAG)

# Kubernetes Configuration
CLUSTER_CONTEXT ?= production-cluster
DOMAIN ?= fastml.example.com
INGRESS_CLASS ?= nginx

# Service Ports
API_PORT = 8000
FRONTEND_PORT = 80
GRAFANA_PORT = 3000
PROMETHEUS_PORT = 9090

# Colors for output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

.PHONY: help
help: ## Show this help message
	@echo "FastML Production Deployment Commands"
	@echo "====================================="
	@awk 'BEGIN {FS = ":.*##"} /^[a-zA-Z_-]+:.*##/ {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# =============================================================================
# Registry and Build Commands
# =============================================================================

.PHONY: login-registry
login-registry: ## Login to container registry
	@echo "$(YELLOW)üîê Logging into container registry...$(NC)"
	@docker login $(REGISTRY)

.PHONY: build
build: ## Build Docker images locally
	@echo "$(YELLOW)üî® Building Docker images...$(NC)"
	@docker build -t $(API_IMAGE) .
	@docker build -t $(FRONTEND_IMAGE) frontend/
	@echo "$(GREEN)‚úÖ Images built successfully$(NC)"

.PHONY: push
push: ## Push images to registry
	@echo "$(YELLOW)üì§ Pushing images to registry...$(NC)"
	@docker push $(API_IMAGE)
	@docker push $(FRONTEND_IMAGE)
	@echo "$(GREEN)‚úÖ Images pushed to $(REGISTRY)$(NC)"

.PHONY: build-push
build-push: build push ## Build and push images to registry

# =============================================================================
# Environment Management
# =============================================================================

.PHONY: set-context
set-context: ## Set kubectl context for deployment
	@echo "$(YELLOW)üîß Setting kubectl context to $(CLUSTER_CONTEXT)...$(NC)"
	@kubectl config use-context $(CLUSTER_CONTEXT)
	@kubectl config set-context --current --namespace=$(NAMESPACE)

.PHONY: create-namespace
create-namespace: ## Create namespace for the environment
	@echo "$(YELLOW)üì¶ Creating namespace $(NAMESPACE)...$(NC)"
	@kubectl create namespace $(NAMESPACE) --dry-run=client -o yaml | kubectl apply -f -
	@kubectl label namespace $(NAMESPACE) environment=$(ENVIRONMENT) --overwrite

# =============================================================================
# Secret Management
# =============================================================================

.PHONY: create-registry-secret
create-registry-secret: ## Create registry authentication secret
	@echo "$(YELLOW)üîë Creating registry authentication secret...$(NC)"
	@kubectl create secret docker-registry registry-secret \
		--docker-server=$(REGISTRY) \
		--docker-username=$(DOCKER_USERNAME) \
		--docker-password=$(DOCKER_PASSWORD) \
		--docker-email=$(DOCKER_EMAIL) \
		-n $(NAMESPACE) \
		--dry-run=client -o yaml | kubectl apply -f -

.PHONY: create-app-secrets
create-app-secrets: ## Create application secrets
	@echo "$(YELLOW)üîê Creating application secrets...$(NC)"
	@kubectl create secret generic app-secrets \
		--from-literal=model-name=distilbert-base-uncased-finetuned-sst-2-english \
		--from-literal=log-level=INFO \
		-n $(NAMESPACE) \
		--dry-run=client -o yaml | kubectl apply -f -

# =============================================================================
# Deployment Commands
# =============================================================================

.PHONY: generate-manifests
generate-manifests: ## Generate production manifests with current config
	@echo "$(YELLOW)üìù Generating production manifests...$(NC)"
	@mkdir -p k8s/production/$(ENVIRONMENT)
	@sed -e 's|{{API_IMAGE}}|$(API_IMAGE)|g' \
		-e 's|{{FRONTEND_IMAGE}}|$(FRONTEND_IMAGE)|g' \
		-e 's|{{NAMESPACE}}|$(NAMESPACE)|g' \
		-e 's|{{ENVIRONMENT}}|$(ENVIRONMENT)|g' \
		-e 's|{{DOMAIN}}|$(DOMAIN)|g' \
		-e 's|{{INGRESS_CLASS}}|$(INGRESS_CLASS)|g' \
		k8s/production/templates/deployment.yaml > k8s/production/$(ENVIRONMENT)/deployment.yaml
	@sed -e 's|{{NAMESPACE}}|$(NAMESPACE)|g' \
		-e 's|{{DOMAIN}}|$(DOMAIN)|g' \
		-e 's|{{INGRESS_CLASS}}|$(INGRESS_CLASS)|g' \
		k8s/production/templates/ingress.yaml > k8s/production/$(ENVIRONMENT)/ingress.yaml
	@echo "$(GREEN)‚úÖ Manifests generated in k8s/production/$(ENVIRONMENT)/$(NC)"

.PHONY: apply-rbac
apply-rbac: ## Apply RBAC configurations
	@echo "$(YELLOW)üëÆ Applying RBAC configurations...$(NC)"
	@kubectl apply -f k8s/production/rbac.yaml -n $(NAMESPACE)

.PHONY: apply-monitoring
apply-monitoring: ## Deploy monitoring stack (Prometheus + Grafana)
	@echo "$(YELLOW)üìä Deploying monitoring stack...$(NC)"
	@kubectl apply -f k8s/production/prometheus.yaml -n $(NAMESPACE)
	@kubectl apply -f k8s/production/grafana.yaml -n $(NAMESPACE)

.PHONY: deploy-app
deploy-app: generate-manifests ## Deploy the application
	@echo "$(YELLOW)üöÄ Deploying FastML application...$(NC)"
	@kubectl apply -f k8s/production/$(ENVIRONMENT)/deployment.yaml
	@kubectl apply -f k8s/production/$(ENVIRONMENT)/ingress.yaml
	@echo "$(GREEN)‚úÖ Application deployed$(NC)"

.PHONY: deploy
deploy: set-context create-namespace create-registry-secret create-app-secrets apply-rbac apply-monitoring deploy-app ## Full deployment pipeline
	@echo "$(GREEN)üéâ Deployment complete!$(NC)"
	@$(MAKE) status

# =============================================================================
# Service Management
# =============================================================================

.PHONY: status
status: ## Show deployment status
	@echo "$(YELLOW)üìä Deployment Status$(NC)"
	@echo "==================="
	@kubectl get pods -n $(NAMESPACE) -o wide
	@echo ""
	@kubectl get services -n $(NAMESPACE)
	@echo ""
	@kubectl get ingress -n $(NAMESPACE)

.PHONY: logs
logs: ## Show application logs
	@echo "$(YELLOW)üìú FastML Application Logs$(NC)"
	@kubectl logs -l app=fastml-serve -n $(NAMESPACE) --tail=100 -f

.PHONY: urls
urls: ## Show service URLs
	@echo "$(GREEN)üåê Service URLs$(NC)"
	@echo "==============="
	@echo "FastML API: https://api.$(DOMAIN)"
	@echo "Frontend UI: https://$(DOMAIN)"
	@echo "Grafana: https://grafana.$(DOMAIN) (admin/admin)"
	@echo "Prometheus: https://prometheus.$(DOMAIN)"

# =============================================================================
# Model Management
# =============================================================================

.PHONY: change-model
change-model: ## Change ML model (usage: make change-model MODEL=model-name ENVIRONMENT=prod)
	@if [ -z "$(MODEL)" ]; then \
		echo "$(RED)‚ùå MODEL variable is required. Usage: make change-model MODEL=model-name$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üîÑ Changing model to: $(MODEL)$(NC)"
	@kubectl patch configmap fastml-serve-config -n $(NAMESPACE) -p '{"data":{"MODEL_NAME":"$(MODEL)"}}'
	@kubectl rollout restart deployment/fastml-serve -n $(NAMESPACE)
	@echo "$(YELLOW)‚è≥ Waiting for rollout to complete...$(NC)"
	@kubectl rollout status deployment/fastml-serve -n $(NAMESPACE) --timeout=300s
	@echo "$(GREEN)‚úÖ Model changed successfully!$(NC)"

.PHONY: current-model
current-model: ## Show current model information
	@echo "$(YELLOW)ü§ñ Current Model Information$(NC)"
	@echo "============================="
	@kubectl get configmap fastml-serve-config -n $(NAMESPACE) -o jsonpath='{.data.MODEL_NAME}' | xargs -I {} echo "Model: {}"
	@kubectl get pods -l app=fastml-serve -n $(NAMESPACE) -o jsonpath='{.items[0].status.phase}' | xargs -I {} echo "Status: {}"

.PHONY: test-model
test-model: ## Test model prediction (usage: make test-model TEXT="text to analyze")
	@if [ -z "$(TEXT)" ]; then \
		echo "$(RED)‚ùå TEXT variable is required. Usage: make test-model TEXT=\"Amazing product!\"$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üß™ Testing model with text: \"$(TEXT)\"$(NC)"
	@INGRESS_IP=$$(kubectl get ingress fastml-serve-ingress -n $(NAMESPACE) -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "api.$(DOMAIN)"); \
	curl -s -X POST "https://$$INGRESS_IP/predict" \
		-H "Content-Type: application/json" \
		-d "{\"text\":\"$(TEXT)\"}" | \
	jq -r '"üìä Result: " + .sentiment + " (" + (.confidence * 100 | floor | tostring) + "%)"' 2>/dev/null || \
	echo "$(RED)‚ùå Failed to test model. Check if service is accessible.$(NC)"

# =============================================================================
# Scaling and Updates
# =============================================================================

.PHONY: scale
scale: ## Scale application (usage: make scale REPLICAS=5)
	@if [ -z "$(REPLICAS)" ]; then \
		echo "$(RED)‚ùå REPLICAS variable is required. Usage: make scale REPLICAS=3$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üìà Scaling application to $(REPLICAS) replicas...$(NC)"
	@kubectl scale deployment fastml-serve -n $(NAMESPACE) --replicas=$(REPLICAS)
	@kubectl rollout status deployment/fastml-serve -n $(NAMESPACE)
	@echo "$(GREEN)‚úÖ Scaled to $(REPLICAS) replicas$(NC)"

.PHONY: rolling-update
rolling-update: build-push ## Perform rolling update with new images
	@echo "$(YELLOW)üîÑ Performing rolling update...$(NC)"
	@kubectl set image deployment/fastml-serve fastml-serve=$(API_IMAGE) -n $(NAMESPACE)
	@kubectl set image deployment/fastml-serve-frontend frontend=$(FRONTEND_IMAGE) -n $(NAMESPACE)
	@kubectl rollout status deployment/fastml-serve -n $(NAMESPACE)
	@kubectl rollout status deployment/fastml-serve-frontend -n $(NAMESPACE)
	@echo "$(GREEN)‚úÖ Rolling update complete$(NC)"

# =============================================================================
# Cleanup Commands
# =============================================================================

.PHONY: clean
clean: ## Delete all resources in the namespace
	@echo "$(YELLOW)üßπ Cleaning up resources in $(NAMESPACE)...$(NC)"
	@kubectl delete all --all -n $(NAMESPACE)
	@kubectl delete configmap --all -n $(NAMESPACE)
	@kubectl delete secret --all -n $(NAMESPACE)
	@echo "$(GREEN)‚úÖ Cleanup complete$(NC)"

.PHONY: delete-namespace
delete-namespace: ## Delete the entire namespace
	@echo "$(RED)‚ö†Ô∏è  Deleting namespace $(NAMESPACE)...$(NC)"
	@kubectl delete namespace $(NAMESPACE)
	@echo "$(GREEN)‚úÖ Namespace deleted$(NC)"

# =============================================================================
# Health and Monitoring
# =============================================================================

.PHONY: health
health: ## Check application health
	@echo "$(YELLOW)üè• Health Check$(NC)"
	@echo "==============="
	@INGRESS_IP=$$(kubectl get ingress fastml-serve-ingress -n $(NAMESPACE) -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "api.$(DOMAIN)"); \
	curl -s "https://$$INGRESS_IP/health" | jq '.' 2>/dev/null || \
	echo "$(RED)‚ùå Health check failed$(NC)"

.PHONY: metrics
metrics: ## Show Prometheus metrics
	@echo "$(YELLOW)üìä Prometheus Metrics$(NC)"
	@echo "====================="
	@PROM_IP=$$(kubectl get ingress prometheus-ingress -n $(NAMESPACE) -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "prometheus.$(DOMAIN)"); \
	curl -s "https://$$PROM_IP/api/v1/query?query=up" | jq '.data.result[] | select(.metric.job=="fastml-serve") | .value[1]' 2>/dev/null || \
	echo "$(RED)‚ùå Metrics unavailable$(NC)"

# =============================================================================
# Environment-Specific Shortcuts
# =============================================================================

.PHONY: deploy-dev
deploy-dev: ## Deploy to development environment
	@$(MAKE) deploy ENVIRONMENT=dev DOMAIN=dev.fastml.example.com

.PHONY: deploy-staging
deploy-staging: ## Deploy to staging environment
	@$(MAKE) deploy ENVIRONMENT=staging DOMAIN=staging.fastml.example.com

.PHONY: deploy-prod
deploy-prod: ## Deploy to production environment
	@$(MAKE) deploy ENVIRONMENT=prod DOMAIN=fastml.example.com REPLICAS=3

# =============================================================================
# Troubleshooting
# =============================================================================

.PHONY: debug
debug: ## Debug deployment issues
	@echo "$(YELLOW)üîç Debug Information$(NC)"
	@echo "======================"
	@echo "Context: $$(kubectl config current-context)"
	@echo "Namespace: $(NAMESPACE)"
	@echo "Images:"
	@echo "  API: $(API_IMAGE)"
	@echo "  Frontend: $(FRONTEND_IMAGE)"
	@echo ""
	@echo "Pod Status:"
	@kubectl get pods -n $(NAMESPACE)
	@echo ""
	@echo "Events:"
	@kubectl get events -n $(NAMESPACE) --sort-by='.lastTimestamp' | tail -10

.PHONY: describe-pods
describe-pods: ## Describe all pods for troubleshooting
	@kubectl get pods -n $(NAMESPACE) -o name | xargs -I {} kubectl describe {} -n $(NAMESPACE)